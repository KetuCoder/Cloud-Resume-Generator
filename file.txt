Cloud Resume Generator with PDF Export & User Profiles

Overview:

Build a cloud-based resume generator that allows users to register, input data, and download custom resumes as PDFs. It will focus on user experience, cloud integration, and automation.

Detailed Tasks:

User Authentication and Profiles:
Set up Amazon Cognito for user management.
Design user profiles to store experience, education, and skills in Amazon DynamoDB.

PDF Generation:
Create a Lambda function triggered via API Gateway to convert HTML templates into PDFs using tools like puppeteer or wkhtmltopdf.
Store generated resumes in Amazon S3, allowing users to download via pre-signed URLs.

Resume Templates:
Offer 2-3 customizable templates. Store HTML/CSS in S3 and allow users to pick.

Frontend UI:
Build a responsive frontend using React or plain JavaScript.

Deploy via S3 + CloudFront.

Security & Access:
Implement IAM roles and S3 bucket policies.
Ensure only the logged-in user can access their documents.


Deliverables:
Resume generator tool with login....


signup lambda logic

import json
import boto3
from boto3.dynamodb.conditions import Key

# Initialize DynamoDB resource
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('Users')  

def lambda_handler(event, context):
    # Handle CORS preflight
    if event.get('httpMethod') == 'OPTIONS':
        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "OPTIONS,POST",
                "Access-Control-Allow-Headers": "Content-Type",
            },
            "body": json.dumps("OK")
        }

    # Parse POST body
    body = json.loads(event.get('body', '{}'))
    action = body.get("action")  # "signup" or "login"
    username = body.get("username")
    email = body.get("email")
    password = body.get("password")

    # Common headers for CORS
    headers = {"Access-Control-Allow-Origin": "*"}

    if action == "signup":
        # Check if user already exists
        response = table.get_item(Key={"email": email})
        if 'Item' in response:
            return {
                "statusCode": 400,
                "headers": headers,
                "body": json.dumps({"message": "Email already registered!"})
            }

        # Save new user
        table.put_item(
            Item={
                "username": username,
                "email": email,
                "password": password,  # For real apps, hash the password!
            }
        )
        return {
            "statusCode": 200,
            "headers": headers,
            "body": json.dumps({"message": "Signup successful!"})
        }

    elif action == "login":
        # Check if user exists
        response = table.get_item(Key={"email": email})
        if 'Item' not in response:
            return {
                "statusCode": 400,
                "headers": headers,
                "body": json.dumps({"message": "Email not registered!"})
            }

        # Verify password
        user = response['Item']
        if user.get("password") != password:
            return {
                "statusCode": 401,
                "headers": headers,
                "body": json.dumps({"message": "Incorrect password!"})
            }

        return {
            "statusCode": 200,
            "headers": headers,
            "body": json.dumps({"message": "Login successful!", "username": user["username"]})
        }

    else:
        return {
            "statusCode": 400,
            "headers": headers,
            "body": json.dumps({"message": "Invalid action!"})
        }


login logic

import json
import boto3
from boto3.dynamodb.conditions import Key

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('Users')  # Replace with your table name

def lambda_handler(event, context):
    # Handle CORS preflight
    if event.get('httpMethod') == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,POST'
            },
            'body': json.dumps({'message': 'CORS preflight'})
        }

    headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'OPTIONS,POST'
    }

    try:
        body = json.loads(event.get('body', '{}'))
        action = body.get('action')

        if action != "login":
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'message': 'Invalid action!'})
            }

        email = body.get('email')
        password = body.get('password')

        if not email or not password:
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'message': 'Email and password required'})
            }

        # Query DynamoDB
        response = table.get_item(Key={'email': email})
        user = response.get('Item')

        if user and user['password'] == password:
            return {
                'statusCode': 200,
                'headers': headers,
                'body': json.dumps({'message': 'Login successful!', 'username': user['username']})
            }
        else:
            return {
                'statusCode': 401,
                'headers': headers,
                'body': json.dumps({'message': 'Invalid credentials'})
            }

    except Exception as e:
        return {
            'statusCode': 500,
            'headers': headers,
            'body': json.dumps({'message': str(e)})
        }


// resume generate code logic

import json
import boto3
import base64
import uuid

s3 = boto3.client("s3")
BUCKET_NAME = "bucket-resume-project"  # 🔸 Replace with your actual bucket name


def lambda_handler(event, context):
    # --- Safe logging (no binary data) ---
    print("Lambda triggered.")
    print("Event keys:", list(event.keys()))
    print("HTTP Method:", event.get("httpMethod"))
    print("Headers:", event.get("headers"))

    try:
        # --- Handle CORS preflight (OPTIONS) ---
        if event.get("httpMethod") == "OPTIONS":
            return {
                "statusCode": 200,
                "headers": {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type,Authorization",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET",
                },
                "body": json.dumps({"message": "CORS preflight OK"}),
            }

        # --- Decode body (API Gateway sends base64 when binary content is present) ---
        body_b64 = event.get("body", "")
        if event.get("isBase64Encoded", False):
            body = base64.b64decode(body_b64)
        else:
            body = body_b64.encode("utf-8")

        print("Decoded body length:", len(body))

        # --- Parse multipart form data ---
        # NOTE: This is a simplified parser for small PDF uploads
        file_start = body.find(b"\r\n\r\n") + 4
        file_end = body.rfind(b"\r\n------")
        if file_start < 4 or file_end == -1:
            raise ValueError("Could not parse multipart/form-data body")

        file_data = body[file_start:file_end]
        print(f"Extracted file bytes: {len(file_data)}")

        # --- Generate unique filename ---
        filename = f"resumes/{uuid.uuid4()}.pdf"

        # --- Upload file to S3 ---
        s3.put_object(
            Bucket=BUCKET_NAME,
            Key=filename,
            Body=file_data,
            ContentType="application/pdf",
        )

        # --- Generate a presigned URL (valid for 1 hour) ---
        url = s3.generate_presigned_url(
            "get_object",
            Params={"Bucket": BUCKET_NAME, "Key": filename},
            ExpiresIn=3600,
        )

        print("File uploaded successfully:", filename)

        # --- Successful response ---
        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type,Authorization",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET",
            },
            "body": json.dumps({"url": url}),
        }

    except Exception as e:
        # --- Error handling ---
        print("Error:", str(e))
        return {
            "statusCode": 500,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type,Authorization",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET",
            },
            "body": json.dumps({"error": str(e)}),
        }




// final resume logic

import json
import boto3
import base64
import uuid
from datetime import datetime

# --- AWS clients ---
s3 = boto3.client("s3")
dynamodb = boto3.resource("dynamodb")
sns = boto3.client("sns")

# --- Constants ---
BUCKET_NAME = "bucket-resume-project"    
TABLE_NAME = "ResumeTable"           
SNS_TOPIC_ARN = "arn:aws:sns:us-east-1:883664613886:mytopic"  

table = dynamodb.Table(TABLE_NAME)


def lambda_handler(event, context):
    try:
        print("Lambda triggered.")

        # --- Handle CORS preflight ---
        if event.get("httpMethod") == "OPTIONS":
            return {
                "statusCode": 200,
                "headers": cors_headers(),
                "body": json.dumps({"message": "CORS preflight OK"}),
            }

        # --- Parse body (JSON) ---
        body = json.loads(event["body"])
        print("Parsed body keys:", list(body.keys()))

        # Required fields
        filename = body.get("filename", f"resume-{uuid.uuid4()}.pdf")
        file_data_b64 = body.get("fileData")
        if not file_data_b64:
            raise ValueError("Missing fileData in request")

        # Decode file
        file_bytes = base64.b64decode(file_data_b64)

        # --- Upload to S3 ---
        s3_key = f"resumes/{filename}"
        s3.put_object(
            Bucket=BUCKET_NAME,
            Key=s3_key,
            Body=file_bytes,
            ContentType="application/pdf",
        )

        # --- Generate presigned URL (valid 1 hour) ---
        url = s3.generate_presigned_url(
            "get_object",
            Params={"Bucket": BUCKET_NAME, "Key": s3_key},
            ExpiresIn=3600,
        )

        # --- Prepare item for DynamoDB ---
        resume_id = str(uuid.uuid4())
        timestamp = datetime.utcnow().isoformat()

        item = {
            "resumeId": resume_id,
            "username": body.get("username", ""),
            "email": body.get("email", ""),
            "country": body.get("country", ""),
            "college": body.get("college", ""),
            "skills": body.get("skills", []),
            "experience": body.get("experience", []),
            "internship": body.get("internship", []),
            "softSkills": body.get("softSkills", []),
            "certification": body.get("certification", []),
            "s3Key": s3_key,
            "s3Url": url,
            "createdAt": timestamp,
        }

        # --- Save to DynamoDB ---
        table.put_item(Item=item)

        print(f"✅ Uploaded {filename} to S3 and saved record {resume_id} in DynamoDB")

        # --- Publish SNS message ---
        message = {
            "resumeId": resume_id,
            "username": item["username"],
            "email": item["email"],
            "uploadedAt": timestamp,
            "s3Url": url,
            "s3Key": s3_key,
        }

        sns.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(message, indent=2),
            Subject=f"New Resume Uploaded: {item['username'] or resume_id}",
        )

        print(f"📢 SNS message published to topic: {SNS_TOPIC_ARN}")

        # --- Success response ---
        return {
            "statusCode": 200,
            "headers": cors_headers(),
            "body": json.dumps({
                "message": "Resume uploaded successfully and SNS notification sent",
                "url": url,
                "resumeId": resume_id,
            }),
        }

    except Exception as e:
        print("❌ Error:", str(e))
        return {
            "statusCode": 500,
            "headers": cors_headers(),
            "body": json.dumps({"error": str(e)}),
        }


def cors_headers():
    """Helper for CORS headers."""
    return {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "Content-Type,Authorization",
        "Access-Control-Allow-Methods": "OPTIONS,POST,GET",
    }
